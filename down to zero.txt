import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'downToZero' function below.
     
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER n as parameter.
     */
            static int [] dp =new int[1000000+1];
        static{
            for(int i=0; i<dp.length; i++) dp[i]= Integer.MAX_VALUE;
            dp[0]=0;
            dp[1]=1;
            
            for(int i=2; i<dp.length; i++){
                dp[i]= Math.min(dp[i],1+dp[i-1]);
                for(int j=2; j*j<=i; j++){
                    if(i%j==0){
                        dp[i]= Math.min(dp[i],1+dp[i/j]);
                    }
                }
            }
        }

    public static int downToZero(int n) {
    // Write your code here

       if(n==0)return 0;
        if(n==1)return 1;
        return dp[n];

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                int result = Result.downToZero(n);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
